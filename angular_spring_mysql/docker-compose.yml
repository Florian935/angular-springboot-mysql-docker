version: '3.7'

# Define services
services:
  # App backend service
  springboot:
    # Configuration for building the docker image for the backend service
    build:
      context: springboot_app_with_maven # Use an image built from the specified dockerfile in the `springboot_app_with_maven` directory.
      dockerfile: Dockerfile
    ports:
      - '8081:8081' # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always    
    depends_on: 
      - database # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://database:3306/dockerizeddb?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password   
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service 
  angular:
    build:
      context: angular-dockerization # Use an image built from the specified dockerfile in the `angular-dockerization` directory.
      dockerfile: Dockerfile
    ports:
      - '4200:80' # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on: 
      - springboot
    networks: 
      - frontend      

   # Database Service (Mysql)    
  database:
    image: mysql:5.7
    ports: 
      - '3306:3306'
    restart: always
    container_name: database
    environment: 
      MYSQL_DATABASE: dockerizeddb
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: root
    volumes: 
      - data-db:/var/lib/mysql
    networks: 
      - backend

  # phpmyadmin panel
  phpmyadmin:
    image: phpmyadmin
    depends_on: 
      - database
    restart: always
    networks:
      - backend
    environment:
      PMA_HOST: database
    ports:
      - '8090:80'

# Volumes
volumes: 
    data-db:

# Networks to be created to facilitate communication between containers      
networks: 
  backend:
  frontend:
